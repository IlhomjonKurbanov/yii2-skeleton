<?php
/**
 * @author Harry Tang <harry@modernkernel.com>
 * @link https://modernkernel.com
 * @copyright Copyright (c) 2016 Modern Kernel
 */

namespace common\models;

use common\Core;
use Yii;
use yii\behaviors\TimestampBehavior;
use yii\db\ActiveRecord;
use yii\helpers\HtmlPurifier;

/**
 * This is the model class for table "{{%core_blog}}".
 *
 * @property integer $id
 * @property string $slug
 * @property string $title
 * @property string $desc
 * @property string $content
 * @property string $tags
 * @property integer $created_by
 * @property integer $status
 * @property integer $created_at
 * @property integer $updated_at
 *
 * @property Account $author
 * @property string $viewUrl
 * @property string $updateUrl
 */
class Blog extends ActiveRecord
{


    const STATUS_PUBLISHED = 10;
    const STATUS_DRAFT = 20;


    /**
     * get status list
     * @param null $e
     * @return array
     */
    public static function getStatusOption($e = null)
    {
        $option = [
            self::STATUS_PUBLISHED => Yii::t('app', 'Published'),
            self::STATUS_DRAFT => Yii::t('app', 'Draft'),
        ];
        if (is_array($e))
            foreach ($e as $i)
                unset($option[$i]);
        return $option;
    }

    /**
     * get status text
     * @return string
     */
    public function getStatusText()
    {
        $status = $this->status;
        $list = self::getStatusOption();
        if (!empty($status) && in_array($status, array_keys($list))) {
            return $list[$status];
        }
        return Yii::t('app', 'Unknown');
    }


    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return '{{%core_blog}}';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['title', 'desc', 'content', 'tags'], 'required'],

            [['slug'], 'match', 'pattern' => '/^[a-z0-9-]+$/'],

            [['content'], 'string'],
            [['created_by', 'status', 'created_at', 'updated_at'], 'integer'],
            [['slug', 'title', 'desc', 'tags'], 'string', 'max' => 255],
            [['created_by'], 'exist', 'skipOnError' => true, 'targetClass' => Account::className(), 'targetAttribute' => ['created_by' => 'id']],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('app', 'ID'),
            'slug' => Yii::t('app', 'Slug'),
            'title' => Yii::t('app', 'Title'),
            'desc' => Yii::t('app', 'Desc'),
            'content' => Yii::t('app', 'Content'),
            'tags' => Yii::t('app', 'Tags'),
            'created_by' => Yii::t('app', 'Author'),
            'status' => Yii::t('app', 'Status'),
            'created_at' => Yii::t('app', 'Created At'),
            'updated_at' => Yii::t('app', 'Updated At'),
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getAuthor()
    {
        return $this->hasOne(Account::className(), ['id' => 'created_by']);
    }

    /**
     * @inheritdoc
     * @return BlogQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new BlogQuery(get_called_class());
    }

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            TimestampBehavior::className(),
        ];
    }

    /**
     * @inheritdoc
     */
    public function beforeSave($insert)
    {
        if($insert){
            $this->created_by=Yii::$app->user->id;
        }

        if(empty($this->slug)){
            $this->slug=Core::generateSeoName($this->title);
        }

        $this->content=HtmlPurifier::process($this->content);
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub

    }

    /**
     * get update url
     * @return string
     */
    public function getUpdateUrl(){
        return Yii::$app->urlManager->createUrl(['/blog/update', 'id'=>$this->id]);
    }

    /**
     * get view url
     * @return string
     */
    public function getViewUrl(){
        return Yii::$app->urlManager->createUrl(['/blog/view', 'id'=>$this->id, 'name'=>$this->slug]);
    }
}
