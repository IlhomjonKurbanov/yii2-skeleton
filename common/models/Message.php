<?php

namespace common\models;

use common\Core;
use Yii;
use yii\db\ActiveRecord;
use yii\db\Query;

/**
 * This is the model class for table "{{%i18n_message}}".
 *
 * @property integer $id
 * @property string $language
 * @property string $translation
 * @property integer $is_translated
 *
 * @property SourceMessage $source
 */
class Message extends ActiveRecord
{



    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return '{{%core_message}}';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['id', 'language', 'translation'], 'required', 'on'=>['update']],
            [['id', 'is_translated'], 'integer'],
            [['translation'], 'string'],
            [['language'], 'string', 'max' => 16]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('app', 'ID'),
            'language' => Yii::t('app', 'Language'),
            'translation' => Yii::t('app', 'Translation'),
            'is_translated' => Yii::t('app', 'Is Translated'),
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getSource()
    {
        return $this->hasOne(SourceMessage::className(), ['id' => 'id']);
    }


    /**
     * @inheritdoc
     * @param bool $insert
     * @return bool
     */
    public function beforeSave($insert)
    {
        if(!$insert){
            $this->is_translated=1;
        }
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritdoc
     * @param bool $insert
     * @param array $changedAttributes
     */
    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
        Yii::$app->cache->flush();
    }

    /**
     * for user account settings
     * @return array
     */
    public static function getLocaleList(){
        /* current translation languages */
        $l=(new Query())->select(['language'])->distinct()->from('{{%core_message}}')->column();
        $l[]=Yii::$app->sourceLanguage;
        /* site default language */
        $default=Setting::getValue('language');
        if(!in_array($default, $l)){
            $l[]=$default;
        }
        return Core::getLocaleList($l);
    }
}
